{{>partial_header}}

import * as nock from "nock";

import { CredentialsMethod, {{appShortName}}Client } from "../index";
import { baseConfig, defaultConfiguration, getNocks } from "./helpers";

const nocks = getNocks(nock);
nock.disableNetConnect();

describe("{{appTitleCaseName}} Client", () => {

  describe("Using the {{appTitleCaseName}} Client", () => {
    let fgaClient: {{appShortName}}Client;

    beforeAll(() => {
      fgaClient = new {{appShortName}}Client({ ...baseConfig, credentials: { method: CredentialsMethod.None } });
    });

    afterEach(() => {
      nock.cleanAll();
    });

    /* Stores */

    describe("ListStores", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const store = { id: "some-id", name: "some-name" };
        const scope = nocks.listStores(defaultConfiguration.getBasePath(), { stores: [store] });

        expect(scope.isDone()).toBe(false);
        const response = await fgaClient.listStores();

        expect(scope.isDone()).toBe(true);
        expect(response.stores).toHaveLength(1);
        expect(response.stores?.[0]).toMatchObject(store);
      });
    });

    describe("CreateStore", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const store = { id: "some-id", name: "some-name" };
        const scope = nocks.createStore(defaultConfiguration.getBasePath(), store);

        expect(scope.isDone()).toBe(false);
        const response = await fgaClient.createStore(store);

        expect(scope.isDone()).toBe(true);
        expect(response).toMatchObject(store);
      });
    });

    describe("GetStore", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const store = { id: defaultConfiguration.storeId, name: "some-name" };
        const scope = nocks.getStore(store.id, defaultConfiguration.getBasePath(), store);

        expect(scope.isDone()).toBe(false);
        const response = await fgaClient.getStore();

        expect(scope.isDone()).toBe(true);
        expect(response).toMatchObject(store);
      });
    });

    describe("DeleteStore", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const scope = nocks.deleteStore(defaultConfiguration.storeId!);

        expect(scope.isDone()).toBe(false);
        await fgaClient.deleteStore();

        expect(scope.isDone()).toBe(true);
      });
    });

    /* Authorization Models */
    describe("ReadAuthorizationModels", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const scope = nocks.readAuthorizationModels(defaultConfiguration.storeId!);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.readAuthorizationModels();

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          authorization_models: expect.arrayContaining([]),
        });
      });
    });

    describe("WriteAuthorizationModel", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const authorizationModel = {
          type_definitions: [
            { type: "workspace", relations: { admin: { this: {} } } },
          ],
        };
        const scope = nocks.writeAuthorizationModel(
          baseConfig.storeId!,
          authorizationModel
        );

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.writeAuthorizationModel(
          authorizationModel
        );

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({ id: expect.any(String) });
      });
    });

    describe("ReadAuthorizationModel", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const modelId = "string";
        const scope = nocks.readSingleAuthzModel(defaultConfiguration.storeId!, modelId);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.readAuthorizationModel({ authorization_model_id: modelId });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          authorization_model: {
            id: expect.any(String),
            type_definitions: expect.arrayContaining([]),
          },
        });
      });
    });

    describe("ReadLatestAuthorizationModel", () => {
      it("should properly call the {{appShortName}} API", async () => {
        const modelId = "string";
        const scope = nocks.readAuthorizationModels(defaultConfiguration.storeId!);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.readLatestAuthorizationModel();

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          authorization_model: {
            id: expect.any(String),
            type_definitions: expect.arrayContaining([]),
          },
        });
      });
    });

    /* Relationship Tuples */
    describe("ReadChanges", () => {
      it("should properly call the {{appShortName}} ReadChanges API", async () => {
        const type = "repo";
        const pageSize = 25;
        const continuationToken = "eyJwayI6IkxBVEVTVF9OU0NPTkZJR19hdXRoMHN0b3JlIiwic2siOiIxem1qbXF3MWZLZExTcUoyN01MdTdqTjh0cWgifQ==";

        const scope = nocks.readChanges(baseConfig.storeId!, type, pageSize, continuationToken);

        expect(scope.isDone()).toBe(false);
        const response = await fgaClient.readChanges({ type }, { pageSize, continuationToken });

        expect(scope.isDone()).toBe(true);
        expect(response).toMatchObject({ changes: expect.arrayContaining([]) });
      });
    });

    describe("Read", () => {
      it("should properly call the {{appShortName}} Read API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.read(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.read(tuple);

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("Write", () => {
      it("should properly call the {{appShortName}} Write API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.write(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.write({
          writes: [tuple],
        }, {
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
        });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });

      it("should properly chunk the calls when called in non-transaction mode", async () => {
        const tuples = [{
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:2",
        }];
        const scope0 = nocks.write(baseConfig.storeId!).matchHeader("X-OpenFGA-Client-Method", "Write");
        const scope1 = nocks.write(baseConfig.storeId!).matchHeader("X-OpenFGA-Client-Method", "Write");
        const scope2 = nocks.write(baseConfig.storeId!).matchHeader("X-OpenFGA-Client-Method", "Write");

        expect(scope0.isDone()).toBe(false);
        expect(scope1.isDone()).toBe(false);
        expect(scope2.isDone()).toBe(false);
        const data = await fgaClient.write({
          writes: tuples,
        }, {
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
          transaction: { disable: true },
        });

        expect(scope0.isDone()).toBe(true);
        expect(scope1.isDone()).toBe(true);
        expect(scope2.isDone()).toBe(false);
        expect(data).toMatchObject({});
      });
    });

    describe("WriteTuples", () => {
      it("should properly call the {{appShortName}} Write API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.write(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.writeTuples([tuple], {
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
        });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("DeleteTuples", () => {
      it("should properly call the {{appShortName}} Write API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.write(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.deleteTuples([tuple], {
          authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw",
        });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    /* Relationship Queries */
    describe("Check", () => {
      it("should properly call the {{appShortName}} Check API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.check(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.check(tuple);

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({ allowed: expect.any(Boolean) });
      });
    });

    describe("BatchCheck", () => {
      it("should properly call the {{appShortName}} Check API", async () => {
        const tuples = [{
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "guest",
          object: "workspace:2",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "reader",
          object: "workspace:3",
        }];
        const scope0 = nocks.check(defaultConfiguration.storeId!, tuples[0], defaultConfiguration.getBasePath(), { allowed: true }, 200).matchHeader("X-OpenFGA-Client-Method", "BatchCheck");
        const scope1 = nocks.check(defaultConfiguration.storeId!, tuples[1], defaultConfiguration.getBasePath(), { allowed: false }, 200).matchHeader("X-OpenFGA-Client-Method", "BatchCheck");
        const scope2 = nocks.check(defaultConfiguration.storeId!, tuples[2], defaultConfiguration.getBasePath(), {
          "code": "validation_error",
          "message": "relation &#39;workspace#reader&#39; not found"
        }, 400).matchHeader("X-OpenFGA-Client-Method", "BatchCheck");

        expect(scope0.isDone()).toBe(false);
        expect(scope1.isDone()).toBe(false);
        expect(scope2.isDone()).toBe(false);
        const response = await fgaClient.batchCheck([tuples[0], tuples[1], tuples[2]]);

        expect(scope0.isDone()).toBe(true);
        expect(scope1.isDone()).toBe(true);
        expect(scope2.isDone()).toBe(true);
        expect(response.length).toBe(3);
        expect(response.sort((a, b) => String(a._request.object).localeCompare(b._request.object)))
          .toMatchObject(expect.arrayContaining([
            { _request: tuples[0], allowed: true, },
            { _request: tuples[1], allowed: false },
            { _request: tuples[2], error: expect.any(Error) },
          ]));
      });
    });

    describe("Expand", () => {
      it("should properly call the {{appShortName}} Expand API", async () => {
        const tuple = {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        };
        const scope = nocks.expand(baseConfig.storeId!, tuple);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.expand(tuple, { authorization_model_id: "1uHxCSuTP0VKPYSnkq1pbb1jeZw" });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({});
      });
    });

    describe("ListObjects", () => {
      it("should call the api and return the response", async () => {
        const mockedResponse = { objects: ["document:roadmap"] };
        const scope = nocks.listObjects(baseConfig.storeId!, mockedResponse);

        expect(scope.isDone()).toBe(false);
        const response = await fgaClient.listObjects({
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "can_read",
          type: "document",
          contextual_tuples:
            [{
              user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
              relation: "editor",
              object: "folder:product"
            }, {
              user: "folder:product",
              relation: "parent",
              object: "document:roadmap"
            }]
        }, {
          authorization_model_id: "01GAHCE4YVKPQEKZQHT2R89MQV",
        });

        expect(scope.isDone()).toBe(true);
        expect(response.objects).toHaveLength(mockedResponse.objects.length);
        expect(response.objects).toEqual(expect.arrayContaining(mockedResponse.objects));
      });
    });

    describe("ListRelations", () => {
      it("should properly pass the request and return an allowed API response", async () => {
        const tuples = [{
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "admin",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "guest",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "reader",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "viewer",
          object: "workspace:1",
        }, {
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "can_read",
          object: "workspace:1",
        }];
        const scope0 = nocks.check(defaultConfiguration.storeId!, tuples[0], defaultConfiguration.getBasePath(), { allowed: true }).matchHeader("X-OpenFGA-Client-Method", "ListRelations");
        const scope1 = nocks.check(defaultConfiguration.storeId!, tuples[1], defaultConfiguration.getBasePath(), { allowed: false }).matchHeader("X-OpenFGA-Client-Method", "ListRelations");
        const scope2 = nocks.check(defaultConfiguration.storeId!, tuples[2], defaultConfiguration.getBasePath(), { allowed: true }).matchHeader("X-OpenFGA-Client-Method", "ListRelations");
        const scope3 = nocks.check(defaultConfiguration.storeId!, tuples[3], defaultConfiguration.getBasePath(), "" as any, 500).matchHeader("X-OpenFGA-Client-Method", "ListRelations");;
        const scope4 = nocks.check(defaultConfiguration.storeId!, tuples[4], defaultConfiguration.getBasePath(), {
          "code": "validation_error",
          "message": "relation &#39;workspace#can_read&#39; not found"
        }, 400).matchHeader("X-OpenFGA-Client-Method", "ListRelations");;
        const scope5 = nocks.readAuthorizationModels(defaultConfiguration.storeId!, defaultConfiguration.getBasePath(), [
          {
            "id": "01GS6KDEJBSAJ4RFQFMEQZ9QN2",
            "schema_version": "1.1",
            "type_definitions": [
              { "type": "user", "relations": {} },
              {
                "type": "workspace",
                "relations": {
                  "admin": { "this": {} },
                  "guest": { "this": {} },
                  "viewer": { "this": {} },
                  "reader": { "this": {} }
                },
                "metadata": {
                  "relations": {
                    "admin": { "directly_related_user_types": [{ "type": "user" }] },
                    "guest": { "directly_related_user_types": [{ "type": "user" }] },
                    "viewer": { "directly_related_user_types": [{ "type": "user" }] },
                    "reader": { "directly_related_user_types": [{ "type": "user" }] }
                  }
                }
              }
            ]
          }]);

        expect(scope0.isDone()).toBe(false);
        expect(scope1.isDone()).toBe(false);
        expect(scope2.isDone()).toBe(false);
        expect(scope3.isDone()).toBe(false);
        expect(scope4.isDone()).toBe(false);
        expect(scope5.isDone()).toBe(false);
        const response = await fgaClient.listRelations({
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          object: "workspace:1",
        });

        expect(scope0.isDone()).toBe(true);
        expect(scope1.isDone()).toBe(true);
        expect(scope2.isDone()).toBe(true);
        expect(scope3.isDone()).toBe(true);
        expect(scope4.isDone()).toBe(false);
        expect(scope5.isDone()).toBe(true);
        expect(response.relations.length).toBe(2);
        expect(response.relations.sort()).toEqual(expect.arrayContaining(["admin", "reader"]));
      });
    });

    /* Assertions */
    describe("ReadAssertions", () => {
      it("should properly call the {{appShortName}} ReadAssertions API", async () => {
        const modelId = "string";
        const scope = nocks.readAssertions(defaultConfiguration.storeId!, modelId);

        expect(scope.isDone()).toBe(false);
        const data = await fgaClient.readAssertions({ authorization_model_id: modelId });

        expect(scope.isDone()).toBe(true);
        expect(data).toMatchObject({
          authorization_model_id: modelId,
          assertions: expect.arrayContaining([]),
        });
      });
    });

    describe("WriteAssertions", () => {
      it("should properly call the {{appShortName}} WriteAssertions API", async () => {
        const modelId = "string";
        const scope = nocks.writeAssertions(defaultConfiguration.storeId!, modelId);

        expect(scope.isDone()).toBe(false);
        await fgaClient.writeAssertions([{
          user: "user:81684243-9356-4421-8fbf-a4f8d36aa31b",
          relation: "viewer",
          object: "document:roadmap",
          expectation: true,
        }], { authorization_model_id: modelId });

        expect(scope.isDone()).toBe(true);
      });
    });
  });
});
