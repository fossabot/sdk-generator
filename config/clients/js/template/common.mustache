/* tslint:disable */
/* eslint-disable */
{{>partial_header}}

import { AxiosResponse, AxiosStatic } from 'axios';

import { Configuration } from "./configuration";
import { Credentials } from "./credentials";
import {
    FgaApiError,
    FgaApiInternalError,
    FgaApiAuthenticationError,
    FgaApiNotFoundError,
    FgaApiRateLimitExceededError,
    FgaApiValidationError,
    FgaError
} from "./errors";
import { setNotEnumerableProperty } from "./utils";

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com';

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}


/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, credentials: Credentials) {
    const accessTokenHeader = await credentials.getAccessTokenHeader();
    if (accessTokenHeader && !object[accessTokenHeader.name]) {
        object[accessTokenHeader.name] = accessTokenHeader.value;
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    for (const object of objects) {
        for (const key in object) {
            if (Array.isArray(object[key])) {
                searchParams.delete(key);
                for (const item of object[key]) {
                    searchParams.append(key, item);
                }
            } else {
                searchParams.set(key, object[key]);
            }
        }
    }
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

type ObjectOrVoid = {} | void;

export type CallResult<T extends ObjectOrVoid> = T & {
    $response: AxiosResponse<T>
};

export type PromiseResult<T extends ObjectOrVoid> = Promise<CallResult<T>>;

function randomTime(loopCount: number, minWaitInMs: number): number {
    const min = Math.ceil(2 ** loopCount * minWaitInMs);
    const max = Math.ceil(2 ** (loopCount + 1) * minWaitInMs);
    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}

/**
 * creates an axios request function
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosStatic, configuration: Configuration, credentials?: Credentials) {
    configuration.isValid();

    const retryParams = axiosArgs.options?.retryParams ? axiosArgs.options?.retryParams : configuration.retryParams;
    const maxRetry:number = retryParams ? retryParams.maxRetry : 0;
    const minWaitInMs:number = retryParams ? retryParams.minWaitInMs : 0;
    if (!credentials) {
        credentials = Credentials.init(configuration);
    }
    return async (axios: AxiosStatic = globalAxios) : PromiseResult<any> => {
        await setBearerAuthToObject(axiosArgs.options.headers, credentials!);
        for (let iterationCount = 0; iterationCount < maxRetry + 1; iterationCount++) {
            try {
                const axiosRequestArgs = {...axiosArgs.options, url: configuration.getBasePath() + axiosArgs.url};
                const response = await axios.request(axiosRequestArgs);
                const data = typeof response.data === 'undefined' ? {} : response.data;
                const result: CallResult<any> = { ...data };
                setNotEnumerableProperty(result, '$response', response);
                return result;
            } catch (err: unknown) {
                if (!axios.isAxiosError(err) || !err.response?.status) {
                    throw new FgaError(err as Error);
                }
                if (err.response?.status === 400 || err.response?.status === 422) {
                    throw new FgaApiValidationError(err);
                } else if (err.response?.status === 401 || err.response?.status === 403) {
                    throw new FgaApiAuthenticationError(err);
                } else if (err.response?.status === 404) {
                    throw new FgaApiNotFoundError(err);
                } else if (err.response?.status === 429 || err.response?.status >= 500) {
                    if (iterationCount >= maxRetry) {
                        // We have reached the max retry limit
                        // Thus, we have no choice but to throw
                        if (err.response?.status === 429) {
                          throw new FgaApiRateLimitExceededError(err);
                        } else {
                          throw new FgaApiInternalError(err);
                        }
                    }
                    await new Promise(r => setTimeout(r, randomTime(iterationCount, minWaitInMs)));
                } else {
                    throw new FgaApiError(err);
                }
            }
        }
    };
}
